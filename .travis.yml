language: python
sudo: false

env:
  global:
    - PYTHON_EXE=python
    - PIP_EXE=pip
    # TWINE_USERNAME
    - secure: Od+iImlaOP2qzkGstfj3TTmhqWDdtZ1+CGFPJnHzZ9mj9l3Pg1Aek369f1MsGBXZeJqojiTx1xg/XzW3xH39QzbuynMGEFYOAZDnQMJsT990H1vKyHsoQ86t4n0T7FEIs6B5BzP1oDROdADHcxmRQ1BoSvWumbq/isGewArGO0M=
    # TWINE_PASSWORD
    - secure: cMN061O5PjB3B8+iSEgyo/qe3QPSDW8GaAupYtHKLnxT2M6JiepuVzZL40y9I1QTnZQMf8VIKH7XExLkgyVvbKZyQCctp9tioBBiAafp6uhAQMLSzj1+03gBzaJQJySPMLX4Snfa/TuhOqym5m4kYQTX/p3qCImzkgxWW1SV+rc=
    - TWINE_REPOSITORY=https://test.pypi.org/legacy/
    - TWINE_REPOSITORY_URL=https://test.pypi.org/legacy/

stages:
  - name: test
  - name: deploy
    if: type = push AND tag =~ ^v\d+\.\d+\.\d+

os:
  - linux

python:
  - "2.7"
  - "pypy"
  - "3.3"
  - "3.4"
  - "3.5"
  - "3.6"
  - "pypy3"

before_install:
  - if [[ $TRAVIS_OS_NAME == "osx" ]]; then
      echo "Updating brew packages.";
      brew update || travis_terminate 1;
      if [[ $TRAVIS_PYTHON_VERSION == "2.7" ]]; then
        echo "Installing python 2.";
        brew install python2 || travis_terminate 1;
      elif [[ $TRAVIS_PYTHON_VERSION == "3.6" ]]; then
        echo "Installing python 3.";
        brew install python3 || travis_terminate 1;
      fi
      $PYTHON_EXE --version || travis_terminate 1;
    fi

install:
  - $PIP_EXE install .

script: 
  - $PYTHON_EXE setup.py test || travis_terminate 1
  # Need to pick a Python version to create the source distribution.
  - if [[ $TRAVIS_PYTHON_VERSION == "3.6" && $TRAVIS_OS_NAME == linux && $TRAVIS_PULL_REQUEST == false && $TRAVIS_TAG =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
      echo "Creating source distribution.";
      $PYTHON_EXE setup.py sdist || travis_terminate 1;
    else
      echo "Skip creation of source distribution.";
    fi
  # Binary wheels for Linux that are too platform specific are not allowed to
  # be uploaded on PyPI. As we compile C code, we only create them on OSX.
  - if [[ $TRAVIS_OS_NAME == osx && $TRAVIS_PULL_REQUEST == false && $TRAVIS_TAG =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
      echo "Creating binary distribution wheel.";
      $PYTHON_EXE setup.py bdist_wheel || travis_terminate 1;
    else
      echo "Skip creation of binary distribution wheel.";
    fi

deploy:
  provider: releases
  api_key:
    secure: Oy5f4YjhoPd1tAFK0nlD9ZmWYH1cpnl5R3erPinemU4S/8l0jyTb4e5gdYVhluzSTZGrvNKJREwTSsq6yOriNc9EgTc/YwkFczkFuPokGzNO+VNfaEfsm9v/zcPH+Tpc51mFWXYnhFzBkJeIeRPNoVXCifFL+WxoCyWg6ljpVHg=
  skip_cleanup: true
  file_glob: true
  file:
    - dist/Whirlpool-*.tar.gz
    - dist/Whirlpool-*.whl
  on:
    tags: true

jobs:
  fast_finish: true
  allow_failures:
    - python: "pypy3"
  include:
    # Manually include OSX in the matrix, but only for
    # Python 2.7 and 3.6.
    - stage: test
      os: osx
      python: 2.7
      language: generic
      env: TRAVIS_PYTHON_VERSION=2.7 PYTHON_EXE=python2 PIP_EXE=pip2
    - stage: test
      os: osx
      python: 3.6
      language: generic
      env: TRAVIS_PYTHON_VERSION=3.6 PYTHON_EXE=python3 PIP_EXE=pip3
    # As the deploy script fetches all build artifacts uploaded to GitHub of
    # all stages, we only need to run it once.
    # So pinning it to Python 3.6 on Linux.
    - stage: deploy
      python: 3.6
      os: linux
      script:
        - echo "Check build status."
        - $PYTHON_EXE .travis/travis-release.py || travis_terminate 1
        - echo "Deploy to PyPI stage."
        - $PIP_EXE install twine || travis_terminate 1
        - twine upload release/* || travis_terminate 1

notifications:
  email:
    on_success: never
    on_failure: change
